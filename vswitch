#!/bin/bash
# GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

source /etc/vswitch.conf
# Text effects
BOLDFONT=$(tput bold)
NORMALFONT=$(tput sgr0)
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Command: vswitch


# Confirm the /etc/vswitch.conf file is present
function fn_check_conf(){
	if [ ! -f "/etc/vswitch.conf" ]; then
		echo "Config file could not be found, creating a new one"
		sudo echo "PROTOCOL=udp" | sudo tee --append /etc/vswitch.conf
		sudo echo "VPNHOST=nordvpn" | sudo tee --append /etc/vswitch.conf
		sudo echo "VPNUSERNAME=" | sudo tee --append /etc/vswitch.conf
		sudo echo "DISTRO=solus" | sudo tee --append /etc/vswitch.conf
		sudo echo "TUNNEL=tun+" | sudo tee --append /etc/vswitch.conf
		sudo echo "IPVERSION=4" | sudo tee --append /etc/vswitch.conf
		echo "New config file successfully created"
	fi
}


################
# HELP/MAN PAGES
################
if [ "$1" = "" ]; then
	echo "Enter an argument or use \"man vswitch\" to view usage"
fi
if [ "$1" = "help" ] || [ "$1" = "/?" ] ; then
	man vswitch
fi


##########
# SETTINGS
##########
if [ "$1" = "update" ] || [ "$1" = "up" ] ; then
# Taken from:   https://nordvpn.com/tutorials/linux/openvpn/
cd  /etc/openvpn
		if [ "$VPNHOST" = "nordvpn" ]; then	
			sudo wget https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
			if [ $(uname -s) = *solus* ]; then
			sudo eopkg install ca-certificates
			sudo eopkg install ca-certs
		else
			sudo apt-get install ca-certificates
			sudo apt-get install ca-certs	
		fi
		sudo unzip ovpn.zip
		sudo rm ovpn.zip
		cd /etc/openvpn/ovpn_${PROTOCOL,,}   # Sets ovpn_ to declared variable in lower case
	fi
fi
if [[ "$1" = host* ]]; then
	VPNHOST="$2"
	if [ "$2" = "" ] || [[ "$2" != * ]] || [[ "$2" != Nord* ]] || [[ "$2" != nord* ]]; then
		fn_check_conf
		PS3='Choose from a list of supported VPN providers: '
		options=("NordVPN" "Quit")
		select provider in "${options[@]}"
		do
		case $provider in
			"NordVPN")
				sudo sed -i '/VPNHOST/ s/.*/VPNHOST='${provider,,}'/' /etc/vswitch.conf; echo "$provider entered"; break;;
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done				
	fi
fi
if [ "$1" = "protocol" ] || [ "$1" = "pr" ]; then
	PROTOCOL="$2"
	if [ "$2" != "udp" ] && [ "$2" != "tcp" ]; then
		fn_check_conf
		PS3='What protocol would you like to connect via? '
		options=("UDP" "TCP" "Either" "Quit")
		select protomethod in "${options[@]}"
		do
		case $protomethod in
			"UDP")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='${protomethod,,}'/' /etc/vswitch.conf; echo "$protomethod entered"; break;;
			"TCP")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='${protomethod,,}'/' /etc/vswitch.conf; echo "$protomethod entered"; break;;
			"Either")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL=udp/' /etc/vswitch.conf; PROTOCOL="udp"; echo "\"$protomethod\" entered - protocol defaulting to $PROTOCOL"; break;;
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done
	fi
fi
if [ "$1" = "ipversion" ] || [ "$1" = "ipv" ]; then
	if [[ "$2" = *4* ]]; then
		IPVERSION="4"
	elif [[ "$2" = *6* ]]; then
		IPVERSION="6"
	fi
	if [[ "$2" != *4* ]] && [[ "$2" != *6* ]]; then
		fn_check_conf
		PS3='What protocol version would you like to connect via? (You are set to connect via $PROTOCOL) '
		options=("IPv4" "IPv6" "Either" "Quit")
		select connectversion in "${options[@]}"
		do
		case $connectversion in
			"IPv4")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='4'/' /etc/vswitch.conf; echo "$connectversion entered"; break;;
			"IPv6")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='6'/' /etc/vswitch.conf; echo "$connectversion entered"; break;;
			"Either")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='4'/' /etc/vswitch.conf; echo "$connectversion  entered - version defaulting to IPv$IPVERSION"; break;;
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done
	fi
fi
if [[ "$1" = stat* ]]; then
	printf "${BOLDFONT}Host:${NORMALFONT}		\t $VPNHOST \n"
	printf "${BOLDFONT}VPN Username:${NORMALFONT}		\t $VPNUSERNAME \n"
	printf "${BOLDFONT}Protocol:${NORMALFONT}	\t $PROTOCOL \n"
	printf "${BOLDFONT}IP Version:${NORMALFONT}	\t IPv$IPVERSION \n"
	printf "${BOLDFONT}Distro:${NORMALFONT}	\t $DISTRO \n"
	printf "${BOLDFONT}Tunnel:${NORMALFONT}	\t $TUNNEL \n"
	nmcli general status
	if [[ $(sudo ufw status) = *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${GREEN}Yes${NC} \n"
	fi
	if [[ $(sudo ufw status) != *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${RED}NO${NC} \n"
		printf "${RED}VSWITCH IS NOT ACTIVE${NC} \n"
	fi
fi
if [[ "$1" = ip ]] || [[ "$1" = who* ]]; then
		NEWIP=`curl icanhazip.com`
		printf "Your current IP is	\t ${GREEN}${NEWIP}${NC} \n" 
fi
	

####################
# CONNECT AND ENABLE
####################

function fn_enable_vswitch(){
	# Copied from:	https://thetinhat.com/tutorials/misc/linux-vpn-drop-protection-firewall.html
	sudo echo "y" | sudo ufw reset &>/dev/null
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default deny outgoing &>/dev/null
	sudo ufw allow out on tun+ from any to any &>/dev/null
	sudo ufw enable &>/dev/null
	if [[ $(sudo ufw status) != *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${RED}VSWITCH COULD NOT ACTIVATE!${NC} \n"
	fi
	if [[ $(sudo ufw status) = *ALLOW*OUT*tun* ]] &>/dev/null; then
		NEWIP=`curl icanhazip.com`
		printf "VPN killswitch	\t ${GREEN}ENABLED${NC} \n"
		printf "Your new IP is	\t ${GREEN}${NEWIP}${NC} \n" 
	fi
}

#if [[ "$1" = connect* ]]; then
#		
#fi
#if [[ "$1" = disconnect* ]]; then
#		
#fi
if [[ "$1" = panic* ]] || [ "$1" = "pan" ]; then
	nmcli networking off
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default deny outgoing &>/dev/null
	#nmcli networking connectivity &>/dev/null
	#nmcli general status &>/dev/null
	echo "${BOLDFONT}PANIC MODE ENABLED${NORMALFONT}"
fi
if [[ "$1" = unpanic* ]]; then
	ncmli networking on
	fn_enable_vswitch
fi
if [ "$1" = "on" ] || [ "$1" = "engage" ] || [ "$1" = "enable" ] ; then
	fn_enable_vswitch
fi
if [[ "$1" = off* ]] || [[ "$1" = disengage* ]] || [ "$1" = "disable" ] ; then
	# Copied from:	https://thetinhat.com/tutorials/misc/linux-vpn-drop-protection-firewall.html
	sudo echo "y" | sudo ufw reset &>/dev/null
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default allow outgoing &>/dev/null
	sudo ufw enable &>/dev/null
	printf "VPN killswitch	\t ${RED}DISABLED${NC} \n"
fi


###########
# UNINSTALL
###########
function fn_uninstall_list(){
	# List all files associated with this script. A unified place to list everything installed
	sudo rm /usr/bin/vswitch
	sudo rm /usr/share/man/man1/vswitch.1
	sudo rm /etc/vswitch.conf
}

if [ "$1" = "remove" ] || [ "$1" = "rm" ]; then
	PS3='Remove vswitch? '
	options=("y" "n" "Quit") y/n
	while true; do
	    read -p "Remove vswitch? (y/n) " yn
	    case $yn in
	        [Yy]* ) fn_uninstall_list; echo "vswitch removed. To reinstall visit https://github.com/MorningCoffeeZombie/LinuxVPNKillswitch"; break;;
	        [Nn]* ) echo "vswitch will not be removed"; break;;
	        * ) echo "Please answer yes or no.";;
	    esac
	done
fi






#################
# UNUSED RESOURCE
#################


# Scripts and arguments:
#echo $0 "has completed running"
#echo $1
#echo $2






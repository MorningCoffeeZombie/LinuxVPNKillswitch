#!/bin/bash
# Created by https://github.com/MorningCoffeeZombie/LinuxVPNKillswitch.git
# aka "RMJ"
# GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

source /etc/openvpn/vswitch.conf
source /etc/bash_completion.d/vswitch
# Text effects
BOLDFONT=$(tput bold)
NORMALFONT=$(tput sgr0)
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Command: vswitch


####################
# FUNCTIONS & ARRAYS
####################
# Confirm the /etc/openvpn/vswitch.conf file is present
function fn_check_conf(){
	if [ ! -f "/etc/openvpn/vswitch.conf" ]; then
		echo "Config file could not be found, creating a new one"
		sudo echo> /etc/openvpn/vswitch.conf
		sudo printf "PROTOCOL=udp\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "REGIONPREF=us\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "VPNHOST=nordvpn\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "VPNUSERNAME=\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "DISTRO=solus\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "TUNNEL=tun+\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo printf "IPVERSION=4\n" | sudo tee --append /etc/openvpn/vswitch.conf
		sudo chmod 777 /etc/openvpn/vswitch.conf
		echo "New config file successfully created"
	fi
}
# Used in the `update` command to wget public VPN hosts
ar_public_vpn_urls=(
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-PL226.zip'
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-DE4.zip'
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-US1.zip'
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-US2.zip'
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-CA222.zip'
	'https://www.vpnbook.com/free-openvpn-account/VPNBook.com-OpenVPN-FR1.zip'
	'http://freevpn.me/OpenVPN-Certificate-Bundle-Server1.zip'
	'http://freevpn.me/OpenVPN-Certificate-Bundle-Server2.zip'
	'http://freevpnsoftware.net/downloads/US.freevpnsoftware.net.ovpn'
	'http://freevpnsoftware.net/downloads/UK.freevpnsoftware.net.ovpn'
)
# Used in `region` command to check for valid ISO codes
# List forked from:	https://github.com/mrzool/nordvpn-server-find/blob/master/nordvpn-server-find
ar_2_digit_iso=(
  'ad' 'ae' 'af' 'ag' 'ai' 'al' 'am' 'ao' 'aq' 'ar' 'as' 'at' 'au' 'aw' 'ax'
  'az' 'ba' 'bb' 'bd' 'be' 'bf' 'bg' 'bh' 'bi' 'bj' 'bl' 'bm' 'bn' 'bo' 'bq'
  'br' 'bs' 'bt' 'bv' 'bw' 'by' 'bz' 'ca' 'cc' 'cd' 'cf' 'cg' 'ch' 'ci' 'ck'
  'cl' 'cm' 'cn' 'co' 'cr' 'cu' 'cv' 'cw' 'cx' 'cy' 'cz' 'de' 'dj' 'dk' 'dm'
  'do' 'dz' 'ec' 'ee' 'eg' 'eh' 'er' 'es' 'et' 'fi' 'fj' 'fk' 'fm' 'fo' 'fr'
  'ga' 'gb' 'gd' 'ge' 'gf' 'gg' 'gh' 'gi' 'gl' 'gm' 'gn' 'gp' 'gq' 'gr' 'gs'
  'gt' 'gu' 'gw' 'gy' 'hk' 'hm' 'hn' 'hr' 'ht' 'hu' 'id' 'ie' 'il' 'im' 'in'
  'io' 'iq' 'ir' 'is' 'it' 'je' 'jm' 'jo' 'jp' 'ke' 'kg' 'kh' 'ki' 'km' 'kn'
  'kp' 'kr' 'kw' 'ky' 'kz' 'la' 'lb' 'lc' 'li' 'lk' 'lr' 'ls' 'lt' 'lu' 'lv'
  'ly' 'ma' 'mc' 'md' 'me' 'mf' 'mg' 'mh' 'mk' 'ml' 'mm' 'mn' 'mo' 'mp' 'mq'
  'mr' 'ms' 'mt' 'mu' 'mv' 'mw' 'mx' 'my' 'mz' 'na' 'nc' 'ne' 'nf' 'ng' 'ni'
  'nl' 'no' 'np' 'nr' 'nu' 'nz' 'om' 'pa' 'pe' 'pf' 'pg' 'ph' 'pk' 'pl' 'pm'
  'pn' 'pr' 'ps' 'pt' 'pw' 'py' 'qa' 're' 'ro' 'rs' 'ru' 'rw' 'sa' 'sb' 'sc'
  'sd' 'se' 'sg' 'sh' 'si' 'sj' 'sk' 'sl' 'sm' 'sn' 'so' 'sr' 'ss' 'st' 'sv'
  'sx' 'sy' 'sz' 'tc' 'td' 'tf' 'tg' 'th' 'tj' 'tk' 'tl' 'tm' 'tn' 'to' 'tr'
  'tt' 'tv' 'tw' 'tz' 'ua' 'ug' 'uk' 'um' 'us' 'uy' 'uz' 'va' 'vc' 've' 'vg'
  'vi' 'vn' 'vu' 'wf' 'ws' 'ye' 'yt' 'za' 'zm' 'zw'
)
# Used in `region` command to check for valid ISO codes
function fn_check_iso_region(){
	if [[ " ${ar_2_digit_iso[*]} " == *"$REGIONPREF"* ]]; then
		echo "Entered: $REGIONPREF"
		sudo sed -i '/REGIONPREF/ s/.*/REGIONPREF='${REGIONPREF,,}'/' /etc/openvpn/vswitch.conf
	else
		echo "$REGIONPREF is not a valid region and/or not supported by NordVPN at this time"
	fi
}
# Used by `on` and `unpanic` to return to a non-firewalled state
function fn_enable_vswitch(){
	# Copied/edited from:	https://thetinhat.com/tutorials/misc/linux-vpn-drop-protection-firewall.html
	sudo echo "y" | sudo ufw reset &>/dev/null
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default deny outgoing &>/dev/null
	sudo ufw allow out on tun+ from any to any &>/dev/null
	sudo ufw enable &>/dev/null
	if [[ $(sudo ufw status) != *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${RED}VSWITCH COULD NOT ACTIVATE!${NC} \n"
	fi
	if [[ $(sudo ufw status) = *ALLOW*OUT*tun* ]] &>/dev/null; then
		NEWIP=`curl icanhazip.com`
		printf "VPN killswitch	\t ${GREEN}ENABLED${NC} \n"
		printf "Your current IP is	\t ${GREEN}${NEWIP}${NC} \n" 
	fi
}
# Used by `remove` command to list all resources and uninstall vswitch
function fn_uninstall_list(){
	# List all files associated with this script. A unified place to list everything installed
	sudo rm /usr/bin/vswitch
	sudo rm /usr/share/man/man1/vswitch.1
	sudo rm /etc/openvpn/vswitch.conf
	sudo rm /etc/bash_completion.d/vswitch
}
function fn_check_distro(){
	if [[ $(apropos "package manager" &>/dev/null) = *eopkg* ]] || [[ $(lsb_release -a) = *olus* ]] || [[ $(cat /etc/issue) = *olus* ]];then
		DISTRO="solus"
	elif [[ $(apropos "package manager" &>/dev/null) = *apt-get* ]] || [[ $(lsb_release -a) = *buntu* ]] || [[ $(lsb_release -a) = *ebian* ]];then
		alias eopkg="apt-get"
		DISTRO="debian"
	fi
}
function fn_check_connectivity(){
	# The idea is: if you can't find IP from any of these (generally reliable) sites...you're probably actively filtering connections.
	if curl icanhazip.com &>/dev/null && curl http://www.google.com &>/dev/null && dig +short myip.opendns.com @resolver1.opendns.com &>/dev/null && wget -qO- ipinfo.io/ip &>/dev/null && curl checkip.amazonaws.com &>/dev/null && dig TXT +short o-o.myaddr.l.google.com @ns1.google.com &>/dev/null; then
		# If you CAN curl then:
		UFWSTATUS="webaccess"
	else
		# If you CANNOT curl & wget & dig then:
		UFWSTATUS="webdenied"
	fi
}
function fn_vswitch_ascii(){
	echo "                      _ __       __  "
	echo " _   ________      __(_) /______/ /_ "
	echo "| | / / ___/ | /| / / / __/ ___/ __ \ "
	echo "| |/ (__  )| |/ |/ / / /_/ /__/ / / /"
	echo "|___/____/ |__/|__/_/\__/\___/_/ /_/ "
}


################
# HELP/MAN PAGES
################
if [ "$1" = "" ]; then
	echo "Enter an argument or use \"man vswitch\" to view usage"
elif [ "$1" = "help" ] || [ "$1" = "/?" ] ; then
	man vswitch
fi


##########
# SETTINGS
##########
if [[ "$1" = distro* ]] || [ "$1" = "os" ]; then
	fn_check_conf
	PS3="What Linux distribution are you using? "
	options=("Solus OS" "Debian-based" "Unknown" "Quit")
	select userdistro in "${options[@]}"
	do
	case $userdistro in
		"Solus OS")
			sudo sed -i '/DISTRO/ s/.*/DISTRO='solus'/' /etc/openvpn/vswitch.conf; echo "$userdistro entered"; break;;
		"Debian-based")
			sudo sed -i '/DISTRO/ s/.*/DISTRO='debian'/' /etc/openvpn/vswitch.conf; echo "$userdistro entered"; break;;
		"Unknown")
			fn_check_distro; sudo sed -i '/DISTRO/ s/.*/DISTRO='$DISTRO'/' /etc/openvpn/vswitch.conf; echo "\"$userdistro\" entered - Distribution detected and set as $DISTRO"; break;;
		"Quit")
			break;;
		*) echo "invalid option $REPLY";;
	esac
	done
fi
if [ "$1" = "update" ] || [ "$1" = "up" ]; then
# Taken from:   https://nordvpn.com/tutorials/linux/openvpn/
	cd  /etc/openvpn
	if [[ $(uname -s) = *olus* ]] || [[ $(lsb_release -a) = *olus* ]] || [[ $(cat /etc/issue) = *olus* ]] || [[ $(apropos "package manager") = *eopkg* ]] || [ $DISTRO = "solus" ]; then
		sudo eopkg install ca-certificates -y
		sudo eopkg install ca-certs -y
	else
		sudo apt-get install ca-certificates -y
		sudo apt-get install ca-certs -y
	fi
	if [ "$VPNHOST" = "nordvpn" ]; then
		sudo mkdir /etc/openvpn/${VPNHOST,,}
		cd /etc/openvpn/${VPNHOST,,}
		sudo wget https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
		sudo unzip ovpn.zip
		sudo rm ovpn.zip
		cd /etc/openvpn/${VPNHOST,,}/ovpn_${PROTOCOL,,}   # Sets current ovpn_ dir to declared variable in lower case
	elif [ "$VPNHOST" = "public" ]; then
		sudo mkdir /etc/openvpn/${VPNHOST,,}
		cd /etc/openvpn/${VPNHOST,,}
		for a in "${ar_public_vpn_urls[@]}"
		do
			sudo wget $a
			a=`echo $a | sed 's:.*/::'` # $a now becomes the filename (after the last "/") instead of the URL
			sudo chmod -R 777 $a
			if [[ "$a" = *.zip* ]]; then
				yes | sudo unzip $a
				sudo rm $a
			fi
		done
		sudo chmod -R 777 /etc/openvpn/${VPNHOST,,}
		cd /etc/openvpn/
		rm /etc/openvpn/${VPNHOST,,}/*ovpn.1	# Remove accidentally duplicated files
	fi
fi
if [[ "$1" = host* ]]; then
	if [[ "${2,,}" = nord* ]]; then
		sudo sed -i '/VPNHOST/ s/.*/VPNHOST='nordvpn'/' /etc/openvpn/vswitch.conf
	elif [[ "${2,,}" = publ* ]]; then
		sudo sed -i '/VPNHOST/ s/.*/VPNHOST='public'/' /etc/openvpn/vswitch.conf
	else
		fn_check_conf
		PS3='Choose from a list of supported VPN providers: '
		options=("NordVPN" "Public" "Quit")
		select provider in "${options[@]}"
		do
		case $provider in
			"NordVPN")
				sudo sed -i '/VPNHOST/ s/.*/VPNHOST='${provider,,}'/' /etc/openvpn/vswitch.conf; echo "$provider entered"; break;;
			"Public")
				sudo sed -i '/VPNHOST/ s/.*/VPNHOST='${provider,,}'/' /etc/openvpn/vswitch.conf; printf "$provider entered. ${RED}${BOLDFONT}PUBLIC VPNs ARE NOT ASSUMED TO BE SAFE!${NC}${NORMALFONT} \n"; break;;	
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done
	fi
fi
if [ "$1" = "protocol" ] || [ "$1" = "pr" ]; then
	if [[ "${2,,}" = u* ]]; then
		sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='udp'/' /etc/openvpn/vswitch.conf
	elif [[ "${2,,}" = t* ]]; then
		sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='tcp'/' /etc/openvpn/vswitch.conf
	else
		fn_check_conf
		PS3="What protocol would you like to connect via? (Current default: $PROTOCOL) "
		options=("UDP" "TCP" "Either" "Quit")
		select protomethod in "${options[@]}"
		do
		case $protomethod in
			"UDP")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='${protomethod,,}'/' /etc/openvpn/vswitch.conf; echo "$protomethod entered"; break;;
			"TCP")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL='${protomethod,,}'/' /etc/openvpn/vswitch.conf; echo "$protomethod entered"; break;;
			"Either")
				sudo sed -i '/PROTOCOL/ s/.*/PROTOCOL=udp/' /etc/openvpn/vswitch.conf; PROTOCOL="udp"; echo "\"$protomethod\" entered - protocol defaulting to $PROTOCOL"; break;;
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done
	fi
fi
if [ "$1" = "ipversion" ] || [ "$1" = "ipv" ]; then
	if [[ "$2" = *4* ]]; then
		sudo sed -i '/IPVERSION/ s/.*/IPVERSION='4'/' /etc/openvpn/vswitch.conf
	elif [[ "$2" = *6* ]]; then
		sudo sed -i '/IPVERSION/ s/.*/IPVERSION='6'/' /etc/openvpn/vswitch.conf
	fi
	if [[ "$2" != *4* ]] && [[ "$2" != *6* ]]; then
		fn_check_conf
		PS3="What protocol version would you like to connect via? (You are set to connect via IPv$IPVERSION) "
		options=("IPv4" "IPv6" "Either" "Quit")
		select connectversion in "${options[@]}"
		do
		case $connectversion in
			"IPv4")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='4'/' /etc/openvpn/vswitch.conf; echo "$connectversion entered"; break;;
			"IPv6")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='6'/' /etc/openvpn/vswitch.conf; echo "$connectversion entered"; break;;
			"Either")
				sudo sed -i '/IPVERSION/ s/.*/IPVERSION='4'/' /etc/openvpn/vswitch.conf; echo "\"$connectversion\" entered - version defaulting to IPv$IPVERSION"; break;;
			"Quit")
				break;;
			*) echo "invalid option $REPLY";;
		esac
		done
	fi
fi
if [ "$1" = "location" ] || [ "$1" = "region" ]; then
	if [[ "$2" != "" ]]; then
		REGIONPREF=$2
		fn_check_conf
		fn_check_iso_region
	elif  [[ "$2" = *lear* ]]; then
		REGIONPREF=""
		sudo sed -i '/REGIONPREF/ s/.*/REGIONPREF='${REGIONPREF,,}'/' /etc/openvpn/vswitch.conf
	else
		echo "Enter a 2-digit ISO country code to set as preference: "
		read REGIONPREF
		fn_check_conf
		fn_check_iso_region
	fi
fi
if [[ "$2" != * ]] || [ "$2" != "" ] && [[ "$1" = user* ]] ; then
	sudo sed -i '/VPNUSERNAME/ s/.*/VPNUSERNAME='$2'/' /etc/openvpn/vswitch.conf
elif [[ "$1" = user* ]] && [[ "$2" = * ]]; then
	printf "${YELLOW}${BOLDFONT}NOTICE: Saving credentials is a security risk!${NORMALFONT}${NC} \n"
	read -p "Enter your $VPNHOST username: " VPNUSERNAME
	sudo sed -i '/VPNUSERNAME/ s/.*/VPNUSERNAME='$VPNUSERNAME'/' /etc/openvpn/vswitch.conf
	echo "$VPNUSERNAME has been saved as your $VPNHOST username"
fi
if [[ "$1" = stat* ]]; then
	fn_check_conf
	fn_vswitch_ascii
	printf "${BOLDFONT}Host:${NORMALFONT}		$VPNHOST \n"
	printf "${BOLDFONT}VPN Username:${NORMALFONT}	$VPNUSERNAME \n"
	printf "${BOLDFONT}Region Pref:${NORMALFONT}	$REGIONPREF \n"
	printf "${BOLDFONT}Protocol:${NORMALFONT}	$PROTOCOL \n"
	printf "${BOLDFONT}IP Version:${NORMALFONT}	IPv$IPVERSION \n"
	printf "${BOLDFONT}Distro:${NORMALFONT}	\t$DISTRO \n"
	printf "${BOLDFONT}Tunnel:${NORMALFONT}	\t$TUNNEL \n"
	nmcli general status
	if [[ $(sudo ufw status) = *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${GREEN}Yes${NC} \n"
	fi
	if [[ $(sudo ufw status) != *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${RED}NO${NC} \n"
		printf "${RED}VSWITCH IS NOT ACTIVE${NC} \n"
	fi
fi
if [[ "$1" = who* ]]; then
		NEWIP=`curl --silent icanhazip.com` &>/dev/null
		printf "Your current IP is	\t ${GREEN}${NEWIP}${NC}\n" 
fi
	

####################
# CONNECT AND ENABLE
####################
function fn_recommend_server(){
# Forked from:	https://github.com/mrzool/nordvpn-server-find/blob/master/nordvpn-server-find
	# Need something here
	servers=$(curl --silent https://nordvpn.com/api/server/stats)
	capacity="30"


	# Declare and populate array
	declare -A results
	while IFS="=" read -r key value
	do
	results[$key]="$value"
	BESTSERVER=$key.$PROTOCOL.ovpn
	done < <(jq --compact-output -r --arg location "$REGIONPREF" --arg capacity "$capacity" --arg limit "$limit" \
	'[. |
	to_entries[] |
	{key: .key, value: .value.percent} |
	select(.value <= ($capacity|tonumber)) |
	select(.key|contains($location))] |
	sort_by(.value) |
	from_entries |
	to_entries |
	map("\(.key)=\(.value|tostring)") |
	limit(($limit|tonumber);.[])' <<<"$servers")

	# Print out results
	if [ ${#results[@]} -eq 0 ]; then
		>&2 echo "$(tput setaf 1)No servers found :("
	else
		printf "${BOLDFONT}SERVER \t\t      POPULATION${NORMALFONT}\n"
		for key in "${!results[@]}"
		do
			echo -e "$(tput setaf 6 && tput bold)$key $(tput sgr0) ${results[$key]}%"
	done |
		awk '{print $NF,$0}' | sort -n | cut -f2- -d' ' | column -t
	fi
}

if [[ "$1" = rec* ]]; then
	limit="20"
	fn_recommend_server
fi
if [[ "$1" = con* ]]; then
	limit="1"
	fn_recommend_server
# Apparently nohup doesnt get along with with sudo and/or openvpn, can't use "&" because it messses with entering credentials
# openvpn commands work with Debian but not with Solus
	if [ "$VPNHOST" = "nordvpn" ] && [[ $DISTRO = *ebian* ]]; then
		IPBEFORECONNECT=`curl --silent icanhazip.com`
		sudo openvpn --config /etc/openvpn/${VPNHOST,,}/*${PROTOCOL,,}*/$BESTSERVER &
		sudo openvpn /etc/openvpn/${VPNHOST,,}/*${PROTOCOL,,}*/$BESTSERVER &
		IPAFTERCONNECT=`curl --silent icanhazip.com`
			if [ "$IPBEFORECONNECT" = "$IPAFTERCONNECT" ]; then
				printf "${RED}${BOLDFONT}VPN CONNECTION FAILED!${NORMALFONT}${NC} \n"
				printf "${RED}${BOLDFONT}YOUR IP HAS NOT CHANGED!${NORMALFONT}${NC} \n"
			else
				printf "${GREEN}${BOLDFONT}Your IP has changed to: \t $IPAFTERCONNECT${NORMALFONT}${NC} \n"
			fi
#	else
#		sudo openvpn --config /etc/openvpn/${VPNHOST,,}/$BESTSERVER &
#		sudo openvpn /etc/openvpn/${VPNHOST,,}/$BESTSERVER &
	fi
	if [[ $DISTRO = *olus* ]]; then
		printf "${YELLOW}${BOLDFONT}Solus OS does not currently support ovpn CLI${NORMALFONT}${NC} \n"
		printf "${YELLOW}${BOLDFONT}Please connect via GUI${NORMALFONT}${NC} \n"
#	else
#		sudo openvpn --config /etc/openvpn/${VPNHOST,,}/$BESTSERVER &
#		sudo openvpn /etc/openvpn/${VPNHOST,,}/$BESTSERVER &
	fi
fi
if [[ "$1" = discon* ]]; then
	sudo killall openvpn
	if [[ $(sudo ufw status) = *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${GREEN}YES${NC} \n"
		printf "Use ${BOLDFONT}vswitch off${NORMALFONT} to renable untunneled connections. \n"
	fi
	if [[ $(sudo ufw status) != *ALLOW*OUT*tun* ]] &>/dev/null; then
		printf "${BOLDFONT}VPN Required:${NORMALFONT}	\t ${RED}NO${NC} \n"
		printf "${RED}VSWITCH IS NOT ACTIVE${NC} \n"
	fi
fi
if [[ "$1" = panic* ]] || [ "$1" = "pan" ]; then
	nmcli networking off
	sudo echo "y" | sudo ufw reset &>/dev/null
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default deny outgoing &>/dev/null
	sudo ufw enable &>/dev/null
	#nmcli networking connectivity &>/dev/null
	#nmcli general status &>/dev/null
	fn_check_connectivity
	if [ "$UFWSTATUS" = "webdenied" ]; then
		echo "${BOLDFONT}PANIC MODE ENABLED${NORMALFONT}"
	elif [ "$UFWSTATUS" = "webaccess" ]; then
		printf "${RED}${BOLDFONT}ERROR!${NORMALFONT}${NC} \n"
		printf "${RED}${BOLDFONT}PANIC MODE FAILURE!${NORMALFONT}${NC} \n"
	else
		printf "${RED}${BOLDFONT}AN UNKNOWN ERROR OCCURED...${NORMALFONT}${NC} \n"
		printf "${RED}${BOLDFONT}ASSUME THE WORST!${NORMALFONT}${NC} \n"
	fi
fi
if [[ "$1" = unpanic* ]]; then
	nmcli networking on
	fn_enable_vswitch
	echo "${BOLDFONT}PANIC MODE DISABLED${NORMALFONT}"
fi
if [ "$1" = "on" ] || [ "$1" = "enable" ]; then
	fn_enable_vswitch
fi
if [[ "$1" = off* ]] || [ "$1" = "disable" ]; then
	# Copied/edited from:	https://thetinhat.com/tutorials/misc/linux-vpn-drop-protection-firewall.html
	sudo echo "y" | sudo ufw reset &>/dev/null
	sudo ufw default deny incoming &>/dev/null
	sudo ufw default allow outgoing &>/dev/null
	sudo ufw enable &>/dev/null
	printf "VPN killswitch	\t ${RED}DISABLED${NC} \n"
fi


###########
# UNINSTALL
###########
if [ "$1" = "remove" ] || [ "$1" = "rm" ]; then
	while true; do
	    read -p "Remove vswitch? (y/n) " yn
	    case $yn in
	        [Yy]* ) fn_uninstall_list; echo "vswitch removed. To reinstall visit https://github.com/MorningCoffeeZombie/LinuxVPNKillswitch"; break;;
	        [Nn]* ) echo "vswitch will not be removed"; break;;
	        * ) echo "Please answer yes or no.";;
	    esac
	done
fi






#################
# UNUSED RESOURCE
#################


# Scripts and arguments:
#echo $0 "has completed running"
#echo $1
#echo $2

# Echo the contents of the ISO array:
#echo "${ar_2_digit_iso[*]}"

# List of public IP resolvers (as commands):
#curl icanhazip.com
#dig +short myip.opendns.com @resolver1.opendns.com
#dig TXT +short o-o.myaddr.l.google.com @ns1.google.com
#curl ipinfo.io/ip
#wget -qO- ipinfo.io/ip
#curl checkip.amazonaws.com






